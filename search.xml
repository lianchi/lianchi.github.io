<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>主审系统前端技术摘要</title>
      <link href="/2018/03/01/%E4%B8%BB%E5%AE%A1%E7%B3%BB%E7%BB%9F%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%91%98%E8%A6%81/"/>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>主审 2.0 采用前后端分离的技术架构。后端仅提供数据 <code>RESTful API</code>；前端负责视图渲染、页面逻辑、路由等，一方面通过 <code>Ajax</code> 的形式从后端获取数据，同时，借助 <code>WebSocket</code> 接收后端的数据 Push （主要包括需要实时展示的数据）。</p><p>该前端界面主要技术栈：</p><ul><li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue2</a>：渐进式前端开发框架</li><li><a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="noopener">Vue-Router</a>：前端路由</li><li><a href="https://vuex.vuejs.org/zh-cn/" target="_blank" rel="noopener">Vuex</a>：集中式状态管理模式</li><li><a href="https://webpack.js.org/" target="_blank" rel="noopener">Webpack</a>：前端构建工具</li><li><a href="http://element.eleme.io/2.0/#/zh-CN/" target="_blank" rel="noopener">ElementUI</a>：前端 UI 框架</li></ul><a id="more"></a><p>本文档中，<strong>第 1 章</strong>为项目使用，<strong>第 2-9 章</strong>为项目源码的技术描述。<strong>附录</strong>为 Vue 技术栈学习总结。</p><h2 id="1-项目使用"><a href="#1-项目使用" class="headerlink" title="1. 项目使用"></a>1. 项目使用</h2><h3 id="1-1-项目结构"><a href="#1-1-项目结构" class="headerlink" title="1.1 项目结构"></a>1.1 项目结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">┌── build                   # webpack 脚本目录</span><br><span class="line">├── config                  # webpack 配置文件</span><br><span class="line">├── dist                    # 生产环境编译打包后的项目目录</span><br><span class="line">├── src                     # 项目源码</span><br><span class="line">│   ├── api                 # 通信基类以及后端交互接口</span><br><span class="line">│   ├── assets              # 资源文件</span><br><span class="line">│   ├── components          # 自定义组件</span><br><span class="line">│   ├── i18n                # 国际化语言配置</span><br><span class="line">│   ├── router              # Vue 路由</span><br><span class="line">│   ├── store               # Vuex 集中状态存储</span><br><span class="line">│   ├── utils               # 样式、时间处理等公用函数</span><br><span class="line">│   ├── views               # 各页面前端视图</span><br><span class="line">│   ├── App.vue             # 顶层 vue 文件</span><br><span class="line">│   ├── main.js             # 入口文件</span><br><span class="line">│   └── socket.io.min.js    # 待删除</span><br><span class="line">├── static                  # 开发模式下的项目静态目录</span><br><span class="line">├── .babelrc</span><br><span class="line">├── .gitignore</span><br><span class="line">├── favicon.ico</span><br><span class="line">├── index.html              # 首页</span><br><span class="line">├── package.json</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><h3 id="1-2-安装"><a href="#1-2-安装" class="headerlink" title="1.2 安装"></a>1.2 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 项目根目录下执行</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3 运行"></a>1.3 运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 开发环境运行</span><br><span class="line">npm run dev </span><br><span class="line"></span><br><span class="line"># 生产环境编译，输出文件默认存放于 /dist/ 下，将其放在服务端即可</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><hr><h2 id="2-api-接口"><a href="#2-api-接口" class="headerlink" title="2. api 接口"></a>2. api 接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># @/api/ 目录结构</span><br><span class="line"></span><br><span class="line">┌── core</span><br><span class="line">│   ├── BaseJWRequest.js        # Java 后端请求基类</span><br><span class="line">│   ├── BasePyRequest.js        # Python 后端请求基类</span><br><span class="line">│   └── socket.js               # WebSocket 基类</span><br><span class="line">├── AuthRequest.js              # 登录认证接口类，继承于基类</span><br><span class="line">├── HMRequest.js              # 主机监控接口类，继承于基类</span><br><span class="line">├── SARequest.js              # 安全审计接口类，继承于基类</span><br><span class="line">└── SysRequest.js               # 系统管理接口类，继承于基类</span><br></pre></td></tr></table></figure><p><code>@/api/core</code> 目录下有两个 <code>Request</code> 请求基类： <code>BaseJWRequest.js</code> 对应 <code>Java</code> 后端，<code>BasePyRequest.js</code> 对应 <code>Python</code> 后端。</p><p><code>@/api/</code> 目录下，<strong>登录认证、主机监控、安全审计、系统管理</strong>四类功能，分别对应 <code>AuthRequest.js</code>、<code>HMRequest.js</code>、<code>SARequest.js</code>、<code>SysRequest.js</code> 四个请求接口类。这些接口类均继承 <code>Java</code> 或 <code>Python</code> 请求基类。</p><p>目前本项目后端采用 <code>Python Flask</code> 框架。下文以 <code>Python</code> 后端作介绍。</p><h3 id="2-1-Python-后端接口"><a href="#2-1-Python-后端接口" class="headerlink" title="2.1 Python 后端接口"></a>2.1 Python 后端接口</h3><p>获取数据请求全部为 <code>GET</code> 方法，执行动作（如增、删、改）全部为 <code>POST</code> 方法，接口区别如下。</p><p><strong>（1） GET 方法</strong></p><ol><li>URL 规则为 /<strong><code>api</code></strong>/xxx/xxx</li><li>例子<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如获取菜单数据</span></span><br><span class="line"><span class="keyword">import</span> &#123; sysRequest &#125; <span class="keyword">from</span> <span class="string">'path/api/SystemRequest'</span></span><br><span class="line">sysRequest.resource.get().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    sysRequest.responseProcess(res, &#123;</span><br><span class="line">        success: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 获取成功的逻辑</span></span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 获取失败的逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><p><strong>（2）POST 方法</strong></p><ol><li>URL 规则为 /<strong><code>ctrl</code></strong>/xxx/&lt;<code>add</code> | <code>del</code> | <code>edit</code>&gt;</li><li>例子<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如获取删除菜单数据</span></span><br><span class="line"><span class="keyword">import</span> &#123; sysRequest &#125; <span class="keyword">from</span> <span class="string">'path/api/SystemRequest'</span></span><br><span class="line"><span class="keyword">let</span> params = &#123;</span><br><span class="line">    id: resourceID</span><br><span class="line">&#125;</span><br><span class="line">sysRequest.resource.del(params).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    sysRequest.responseProcess(res, &#123;</span><br><span class="line">        success: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 删除成功的逻辑</span></span><br><span class="line">        &#125;,</span><br><span class="line">        error: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 删除失败的逻辑</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2-审计后端接口"><a href="#2-2-审计后端接口" class="headerlink" title="2.2 审计后端接口"></a>2.2 审计后端接口</h3><p>审计的后端请求基于 <code>RESTful</code> 规范，需要提供 <code>GET</code>、<code>DELETE</code>、 <code>POST</code>、 <code>PUT</code>、 方法对应的操作为：</p><ul><li>GET – 获取数据</li><li>POST – 添加数据</li><li>PUT – 修改数据</li><li>DELETE – 删除数据</li></ul><hr><h2 id="3-assets-资源文件"><a href="#3-assets-资源文件" class="headerlink" title="3. assets 资源文件"></a>3. assets 资源文件</h2><p>为了实现页面刷新后保持上一次的主题配置，将主题标记写入 <code>sessionStorage</code> 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># @/assets/ 目录结构</span><br><span class="line"></span><br><span class="line">┌── images                  # 图片资源目录</span><br><span class="line">├── mycss                   # 自定义 CSS 资源目录</span><br><span class="line">│   ├── animate.css         # 动画 CSS</span><br><span class="line">│   ├── main.scss           # 自定义全局 CSS</span><br><span class="line">│   ├── mycss-dark.scss     # 暗色主题 CSS</span><br><span class="line">│   └── mycss-light.scss    # 浅色主题 CSS</span><br><span class="line">└── theme                   # 从 ElementUI 抽离的界面风格资源目录</span><br><span class="line">    └── theme-blue          # 蓝色风格，颜色 Hex 值：#287dd0</span><br></pre></td></tr></table></figure><p><code>@/assets/</code> 目录下录：</p><ul><li><code>images</code>： 存放图片</li><li><code>mycss</code>：自定义的全局 CSS</li><li><code>theme</code>：从 <code>ElementUI</code> 中抽离的界面主题 CSS 文件，对应浅色主题</li></ul><hr><h2 id="4-components-自定义组件"><a href="#4-components-自定义组件" class="headerlink" title="4. components 自定义组件"></a>4. components 自定义组件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># @/components/ 目录结构</span><br><span class="line"></span><br><span class="line">┌── common              # 通用组件，基于 ElementUI 组件的二次封装</span><br><span class="line">├── Echarts             # Echarts 图表组件</span><br><span class="line">├── layout              # 页面布局组件</span><br><span class="line">├── widgets             # 小插件</span><br><span class="line">│   ├── BackToTop.vue   # 返回顶部小插件</span><br><span class="line">│   ├── Sticky.vue      # Sticky header 插件</span><br><span class="line">│   └── MDinput.vue     # Material Design 形式的输入框组件</span><br><span class="line">├── hm                # 主机监控模块中可以复用的组件</span><br><span class="line">├── sa                # 安全审计模块中可以复用的组件</span><br><span class="line">└── sys                 # 系统管理模块中可以复用的组件</span><br></pre></td></tr></table></figure><p><code>@/components/</code> 目录下：</p><ul><li><code>common</code>： 考虑到有些功能组件的复用性，对 <code>ElementUI</code> 原生组件进行二次封装，以适配本项目需求，目前有 <code>ButtonGroup</code>、<code>Dialog</code>、<code>Table</code>、<code>SelectTree</code>、<code>TreeTable</code>。</li><li><code>Echarts</code>：基于 Echarts 编写的图表类组件。</li><li><code>layout</code>：页面布局通用组件，包括顶部导航、左侧导航、主页面、页脚等。</li><li><code>widgets</code>：一些小插件。</li><li><code>hm</code>：主机监控功能模块中复用率高且代码量多的组件，如 <code>OrgDialog</code>、<code>Push</code>、<code>RadioForm</code>。</li><li><code>sa</code>：安全审计功能模块中复用率高且代码量多的组件，如 <code>DeviceTable</code>、<code>ValueTable</code> 等。</li><li><code>sys</code>：系统管理功能模块中复用率高且代码量多的组件，如 <code>ResourceDialog</code>、<code>UserRoleDialog</code> 等。</li></ul><hr><h2 id="5-i18n-国际化"><a href="#5-i18n-国际化" class="headerlink" title="5. i18n 国际化"></a>5. i18n 国际化</h2><p><code>ElementUI</code> 兼容 <a href="mailto:`vue-i18n@5.x" target="_blank" rel="noopener">`vue-i18n@5.x</a><code>。搭配使用能更方便地实现多语言切换。本项目为</code><a href="mailto:vue-i18n@5.0.3" target="_blank" rel="noopener">vue-i18n@5.0.3</a>`，其他版本需要手动配置，较麻烦。</p><p>为了实现页面刷新后保持上一次的语言配置，将语言标记写入 <code>sessionStorage</code> 中。<br>同时，在项目的 <code>App.vue</code> 和 <code>Login.vue</code> 中的 <code>mounted()</code> 生命周期钩子函数里，均进行了语言初始化。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># @/i18n/ 目录结构</span><br><span class="line"></span><br><span class="line">┌── en-US.json      # 英文各字段</span><br><span class="line">├── zh-CN.json      # 中文各字段</span><br><span class="line">├── index.js        # 入口 index</span><br><span class="line">└── lang.js         # 语言对象</span><br></pre></td></tr></table></figure><p><code>@/i18n/</code> 目录下：</p><ul><li><code>en-US.json</code>： json 格式的英文字符串。</li><li><code>zh-CN.json</code>： json 格式的中文字符串。</li><li><code>index.js</code>：用于在 <code>@/main.js</code> 中 <code>import</code> 导入。</li><li><code>lang.js</code>：语言配置对象。集成了自定义的语言包（即两个 <code>json</code> 文件）和 <code>ElementUI</code> 的语言包。</li></ul><hr><h2 id="6-router-路由"><a href="#6-router-路由" class="headerlink" title="6. router 路由"></a>6. router 路由</h2><p>前端路由表，本项目采用 <code>history</code> 模式的路由（详情见<code>附录 4</code>）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># @/router/ 目录结构</span><br><span class="line"></span><br><span class="line">┌── _import_development.js  # 开发环境下组件导入函数</span><br><span class="line">├── _import_production.js   # 生产环境下组件导入函数</span><br><span class="line">└── index.js                 # 路由表</span><br></pre></td></tr></table></figure><p><code>@/router/</code> 目录下：</p><ul><li><code>_import_development.js</code>： <code>development</code> 环境下<strong>不用</strong>懒加载，一次性加载所有组件，同时防止大页面下 <code>webpack</code> 热更新太慢。</li><li><code>_import_production.js</code>： <code>production</code> 环境下使用懒加载，按需加载组件，提高用户体验。</li><li><code>index.js</code>：分为<strong>静态路由表</strong>和<strong>动态路由表</strong>，前者定义的组件总是显示，后者由用户权限控制是否显示。</li></ul><hr><h2 id="7-store-集中式状态存储"><a href="#7-store-集中式状态存储" class="headerlink" title="7. store 集中式状态存储"></a>7. store 集中式状态存储</h2><p>目前本项目使用的 <code>state</code> 有：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">topNav:         <span class="function"><span class="params">state</span> =&gt;</span> state.page.topNav,</span><br><span class="line">visitedViews:   <span class="function"><span class="params">state</span> =&gt;</span> state.page.visitedViews,</span><br><span class="line">collapsed:      <span class="function"><span class="params">state</span> =&gt;</span> state.page.collapsed,</span><br><span class="line">hasResource:    <span class="function"><span class="params">state</span> =&gt;</span> state.user.hasResource,</span><br><span class="line">allRouters:     <span class="function"><span class="params">state</span> =&gt;</span> state.permission.allRouters,</span><br><span class="line">dynamicRouters: <span class="function"><span class="params">state</span> =&gt;</span> state.permission.dynamicRouters</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># @/store/ 目录结构</span><br><span class="line"></span><br><span class="line">┌── modules             # store 模块</span><br><span class="line">│   ├── page.js         # 页面相关 store</span><br><span class="line">│   ├── permission.js   # 权限相关 store</span><br><span class="line">│   └── user.js         # 管理员用户相关 store</span><br><span class="line">├── getters.js          # getters，封装了 state 的获取方法</span><br><span class="line">└── index.js            # store 对象</span><br></pre></td></tr></table></figure></p><p><code>@/store/</code> 目录下：</p><ul><li><code>modules</code>：通过功能对 <code>store</code> 进行模块化区分，便于代码组织和阅读 。</li><li><code>getters</code>： 统一各个 <code>state</code>。</li><li><code>index.js</code>：生成 <code>store</code> 对象，在 <code>@/main.js</code> 中进行导入。</li></ul><hr><h2 id="8-utils-公共函数"><a href="#8-utils-公共函数" class="headerlink" title="8. utils 公共函数"></a>8. utils 公共函数</h2><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># @/utils/ 目录结构</span><br><span class="line"></span><br><span class="line">┌── three               # 3D 绘图插件 - three</span><br><span class="line">│   ├── loginWave.js    # 登录页水波纹效果 js</span><br><span class="line">│   └── three.js        # three.js 插件</span><br><span class="line">├── datetimeFunc.js     # 日期时间处理函数</span><br><span class="line">├── styleFunc.js        # 样式相关的处理函数</span><br><span class="line">└── validate.js         # 认证相关的处理函数</span><br></pre></td></tr></table></figure></p><p><code>@/utils/</code> 目录下：</p><ul><li><code>three</code>：3D 绘图插件目录。</li><li><code>datetimeFunc.js</code>： 日期时间处理函数，包含对时间戳进行格式化输出，以及 <code>ElementUI dataPicker</code> 组件的 <code>shortcut</code> 数据。</li><li><code>styleFunc.js</code>：样式相关的处理函数，包含主题切换、确认框组件、按钮生成组件、树形资源生成函数等。</li><li><code>validate.js</code>：认证相关的处理函数，包含输入字符串的正则表达式匹配函数。</li></ul><hr><h2 id="9-views-页面视图"><a href="#9-views-页面视图" class="headerlink" title="9. views 页面视图"></a>9. views 页面视图</h2><p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># @/views/ 目录结构</span><br><span class="line"></span><br><span class="line">┌── auth                    # 认证相关页面</span><br><span class="line">│   └── Login.vue           # 登录页面</span><br><span class="line">├── custom                  # 审计展示页面</span><br><span class="line">├── hm                      # 主机监控页面  </span><br><span class="line">│   ├── assetMG             # 资产管理页面</span><br><span class="line">│   ├── monitor             # 监控中心页面</span><br><span class="line">│   ├── orgMG               # 组织管理页面</span><br><span class="line">│   ├── policyMG            # 策略管理页面</span><br><span class="line">│   └── updateMG            # 升级管理页面</span><br><span class="line">├── sa                      # 安全审计页面</span><br><span class="line">│   ├── normalSA            # 终端普通安全审计页面</span><br><span class="line">│   ├── policySA            # 终端安全策略审计页面</span><br><span class="line">│   ├── SecAuditDevice.vue  # 安全设备审计页面</span><br><span class="line">│   └── ...                 # 等等</span><br><span class="line">├── sys                     # 系统管理页面</span><br><span class="line">│   ├── Log.vue             # 系统日志页面</span><br><span class="line">│   ├── Resource.vue        # 系统资源页面</span><br><span class="line">│   ├── Role.vue            # 系统角色页面</span><br><span class="line">│   └── User.vue            # 系统用户页面</span><br><span class="line">├── Home.vue                # 主页面框架</span><br><span class="line">├── 404.vue                 # 404 页面</span><br><span class="line">├── Welcome.vue             # 欢迎页面</span><br><span class="line">└── Joke.vue                # 预留给审计展示页面</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端框架 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端界面js编程规范</title>
      <link href="/2018/02/27/%E5%89%8D%E7%AB%AF%E7%95%8C%E9%9D%A2js%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
      <content type="html"><![CDATA[<p>本文内容主要参考了 <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">Airbnb</a> 公司的 JavaScript 风格规范。</p><h2 id="1-块级作用域"><a href="#1-块级作用域" class="headerlink" title="1. 块级作用域"></a>1. 块级作用域</h2><p><strong>（1）let 取代 var</strong></p><p>ES6 提出了两个新的声明变量的命令：<code>let</code> 和 <code>const</code>。其中，<code>let</code> 完全可以取代 <code>var</code>，因为两者语义相同，而且 <code>let</code> 没有副作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面代码如果用 <code>var</code> 替代 <code>let</code>，实际上就声明了两个全局变量，这显然不是本意。变量应该只在其声明的代码块内有效，<code>var</code> 命令做不到这一点。</p><p><code>var</code> 命令存在变量提升效用，<code>let</code> 命令没有这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x); <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> x = <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码如果使用 <code>var</code> 替代 <code>let</code>，<code>console.log</code> 那一行就不会报错，而是会输出 <code>undefined</code>，因为变量声明提升到代码块的头部。这违反了变量先声明后使用的原则。</p><p>所以，建议不再使用 <code>var</code> 命令，而是使用 <code>let</code> 命令取代。</p><p><strong>（2）全局常量和线程安全</strong></p><p>在 <code>let</code> 和 <code>const</code> 之间，建议优先使用 <code>const</code>，尤其是在全局环境，不应该设置变量，只应设置常量。</p><p><code>const</code> 优于 <code>let</code> 有几个原因。一个是 <code>const</code> 可以提醒阅读程序的人，这个变量不应该改变；另一个是 <code>const</code> 比较符合函数式编程思想，运算不改变值，只是新建值，而且这样也有利于将来的分布式运算；最后一个原因是 JavaScript 编译器会对 <code>const</code> 进行优化，所以多使用<code>const</code>，有利于提供程序的运行效率，也就是说 <code>let</code> 和 <code>const</code> 的本质区别，其实是编译器内部的处理不同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p><code>const</code> 声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改变量值所导致的错误。</p><p>所有的函数都应该设置为常量。</p><p>长远来看，JavaScript 可能会有多线程的实现，这时 <code>let</code> 表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全。</p><h2 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h2><p>静态字符串一律使用单引号或反引号，不使用双引号。动态字符串使用反引号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">"foobar"</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">'foo'</span> + a + <span class="string">'bar'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// acceptable</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="string">`foobar`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="string">'foobar'</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="string">`foo<span class="subst">$&#123;a&#125;</span>bar`</span>;</span><br><span class="line"><span class="keyword">const</span> c = <span class="string">'foobar'</span>;</span><br></pre></td></tr></table></figure><h2 id="3-解构赋值"><a href="#3-解构赋值" class="headerlink" title="3. 解构赋值"></a>3. 解构赋值</h2><p>使用数组成员对变量赋值时，优先使用解构赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr;</span><br></pre></td></tr></table></figure><p>函数的参数如果是对象的成员，优先使用解构赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> firstName = user.firstName;</span><br><span class="line">  <span class="keyword">const</span> lastName = user.lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [left, right, top, bottom];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</span><br></pre></td></tr></table></figure><h2 id="4-对象"><a href="#4-对象" class="headerlink" title="4. 对象"></a>4. 对象</h2><p>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2, &#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  k1: v1,</span><br><span class="line">  k2: v2</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2 &#125;;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line">  k1: v1,</span><br><span class="line">  k2: v2,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用 <code>Object.assign</code> 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line">a.x = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if reshape unavoidable</span></span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(a, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> a = &#123; <span class="attr">x</span>: <span class="literal">null</span> &#125;;</span><br><span class="line">a.x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">&#125;;</span><br><span class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  id: <span class="number">5</span>,</span><br><span class="line">  name: <span class="string">'San Francisco'</span>,</span><br><span class="line">  [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，对象 <code>obj</code> 的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建 <code>obj</code> 的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了。</p><p>另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ref = <span class="string">'some value'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  ref: ref,</span><br><span class="line"></span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> atom = &#123;</span><br><span class="line">  ref,</span><br><span class="line"></span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> atom.value + value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5. 数组"></a>5. 数组</h2><p>使用扩展运算符 <code>...</code> 拷贝数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> len = items.length;</span><br><span class="line"><span class="keyword">const</span> itemsCopy = [];</span><br><span class="line"><span class="keyword">let</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">  itemsCopy[i] = items[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> itemsCopy = [...items];</span><br></pre></td></tr></table></figure><p>使用 <code>Array.from</code> 方法，将类似数组的对象转为数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</span><br><span class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</span><br></pre></td></tr></table></figure><h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6. 函数"></a>6. 函数</h2><p>立即执行函数可以写成箭头函数的形式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet.'</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了 <code>this</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> x * x);</span><br></pre></td></tr></table></figure><p>箭头函数取代 <code>Function.prototype.bind</code>，不应再用 <code>self/_this/that</code> 绑定 <code>this</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">const</span> boundMethod = <span class="function"><span class="keyword">function</span>(<span class="params">...params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> method.apply(self, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// acceptable</span></span><br><span class="line"><span class="keyword">const</span> boundMethod = method.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// best</span></span><br><span class="line"><span class="keyword">const</span> boundMethod = <span class="function">(<span class="params">...params</span>) =&gt;</span> method.apply(<span class="keyword">this</span>, params);</span><br></pre></td></tr></table></figure><p>简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。</p><p>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b, option = false </span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b, &#123; option = false &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不要在函数体内使用 <code>arguments</code> 变量，使用rest运算符 <code>...</code> 代替。因为 <code>rest</code> 运算符显式表明你想要获取参数，而且 <code>arguments</code> 是一个类似数组的对象，而 <code>rest</code> 运算符可以提供一个真正的数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> args.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用默认值语法设置函数参数的默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  opts = opts || &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Map结构"><a href="#7-Map结构" class="headerlink" title="7. Map结构"></a>7. Map结构</h2><p>注意区分 <code>Object</code> 和 <code>Map</code>，只有模拟现实世界的实体对象时，才使用 <code>Object</code>。如果只是需要 <code>key: value</code> 的数据结构，使用 <code>Map</code> 结构。因为 <code>Map</code> 有内建的遍历机制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-Class"><a href="#8-Class" class="headerlink" title="8. Class"></a>8. Class</h2><p>总是用 <code>Class</code>，取代需要 <code>prototype</code> 的操作。因为 <code>Class</code> 的写法更简洁，更易于理解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>._queue = [...contents];</span><br><span class="line">&#125;</span><br><span class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(contents = []) &#123;</span><br><span class="line">    <span class="keyword">this</span>._queue = [...contents];</span><br><span class="line">  &#125;</span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>extends</code> 实现继承，因为这样更简单，不会有破坏 <code>instanceof</code> 运算的危险。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'inherits'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">  Queue.apply(<span class="keyword">this</span>, contents);</span><br><span class="line">&#125;</span><br><span class="line">inherits(PeekableQueue, Queue);</span><br><span class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  peek() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-模块"><a href="#9-模块" class="headerlink" title="9. 模块"></a>9. 模块</h2><p>首先，<code>Module</code> 语法是 <code>JavaScript</code> 模块的标准写法，坚持使用这种写法。使用 <code>import</code> 取代 <code>require</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">'moduleA'</span>);</span><br><span class="line"><span class="keyword">const</span> func1 = moduleA.func1;</span><br><span class="line"><span class="keyword">const</span> func2 = moduleA.func2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> &#123; func1, func2 &#125; <span class="keyword">from</span> <span class="string">'moduleA'</span>;</span><br></pre></td></tr></table></figure><p>使用 <code>export</code> 取代 <code>module.exports</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commonJS的写法</span></span><br><span class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Breadcrumbs = React.createClass(&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> &lt;nav /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = Breadcrumbs;</span><br><span class="line"></span><br><span class="line">// ES6的写法</span><br><span class="line">import React from 'react';</span><br><span class="line"></span><br><span class="line">class Breadcrumbs extends React.Component &#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    return &lt;nav /&gt;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Breadcrumbs;</span><br></pre></td></tr></table></figure><p>如果模块只有一个输出值，就使用 <code>export default</code>，如果模块有多个输出值，就不使用 <code>export default</code>，<code>export default</code> 与普通的 <code>export</code> 不要同时使用。</p><p>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myObject <span class="keyword">from</span> <span class="string">'./importModule'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">import</span> myObject <span class="keyword">from</span> <span class="string">'./importModule'</span>;</span><br></pre></td></tr></table></figure><p>如果模块默认输出一个函数，函数名的首字母应该小写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</span><br></pre></td></tr></table></figure><p>如果模块默认输出一个对象，对象名的首字母应该大写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> StyleGuide = &#123;</span><br><span class="line">  es6: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> StyleGuide;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端框架 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
